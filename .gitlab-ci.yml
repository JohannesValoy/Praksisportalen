# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
# Inspired by https://www.digitalocean.com/community/tutorials/how-to-set-up-a-continuous-deployment-pipeline-with-gitlab-on-ubuntu

stages:
  - install
  - checks
  - publish
  - deploy

default:
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - node_modules/
      - public/
    policy: pull
  image: oven/bun:1

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Defines the location of the analysis task cache
  GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_PROTECTED == "true"

install:
  stage: install
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      - node_modules/
      - public/
    policy: push
  script:
    - bun install --also=dev

build:
  stage: checks
  script:
    - bun run build

sonarcloud-check:
  stage: checks
  image:
    name: sonarsource/sonar-scanner-cli:5
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  inherit:
    default: false
  script:
    - sonar-scanner

format:
  stage: checks
  allow_failure: true
  script:
    - bun run format

publish:
  image: docker:latest
  inherit:
    default: false
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - dind
  stage: publish
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker logout
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker compose -f docker-compose.prod.yaml build
    - docker compose -f docker-compose.prod.yaml push
    - docker logout

deploy:
  image: alpine:latest
  stage: deploy
  inherit:
    default: false
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  tags:
    - deployment
  script:
    - chmod 600 $ID_RSA
    - apk update && apk add openssh-client
    - scp -i $ID_RSA -o StrictHostKeyChecking=no ./docker-compose.prod.yaml deployer@129.241.153.29:/home/deployer
    - mv ./Caddyfile ./Caddyfile.tmp
    - scp -i $ID_RSA -o StrictHostKeyChecking=no ./Caddyfile.tmp deployer@129.241.153.29:/home/deployer
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no deployer@129.241.153.29 "mv Caddyfile.tmp Caddyfile"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no deployer@129.241.153.29 "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no deployer@129.241.153.29 "docker image pull registry.stud.idi.ntnu.no:5050/bachelorgruppe-12-bidata-2024/praksisplasslista"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no deployer@129.241.153.29 'docker compose -f docker-compose.prod.yaml --env-file .env up -d'
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no deployer@129.241.153.29 "docker logout"
